# Specify surrogate model by combination of statistical model and keyword arguments.
#
# Surrogate models get a unique name and are then specified via the combination of a
# statistcal model and a set of keyword arguments that are used in the fitting
# procedure.
#
# Example: The classical linear model (standard ols) is identified by the unique
# surrogate model name "linear" and specified by the statistical model
# "PolynomailRegressor" with the combination of "degree: 1", "fit_intercept: True"
# "scale: True" and "n_jobs: 4". Allowed keyword arguments can be found, in this
# example, in the ``fit`` function in the module ``src/polynomialregression.py``.
#

linear:
    model: PolynomialRegressor
    kwargs:
        degree: 1
        fit_intercept: True
        scale: True
        n_jobs: 4

quadratic:
    model: PolynomialRegressor
    kwargs:
        degree: 2
        fit_intercept: True
        interaction: False
        scale: True
        n_jobs: 4

quadratic_full:
    model: PolynomialRegressor
    kwargs:
        degree: 2
        fit_intercept: True
        interaction: True
        scale: True
        n_jobs: 4

ridge_quadratic_full:
    model: RidgeRegressor
    kwargs:
        degree: 2
        fit_intercept: True
        interaction: True
        scale: True

cubic:
    model: PolynomialRegressor
    kwargs:
        degree: 3
        fit_intercept: True
        interaction: False
        scale: True
        n_jobs: 4

catboost_slow:
    model: CatBoostRegressor
    kwargs:
        iterations: 1500
        learning_rate: 0.03
        depth: 8
        loss_function: MAE

catboost_fast:
    model: CatBoostRegressor
    kwargs:
        iterations: 1000
        learning_rate: 0.05
        depth: 8
        loss_function: MAE

catboost_quadratic:
    model: CatBoostRegressor
    kwargs:
        iterations: 3000
        learning_rate: 0.05
        depth: 4
        loss_function: MAE
        pre_fit_model: quadratic

catboost_quadratic_paper:
    model: CatBoostRegressor
    kwargs:
        iterations: 3000
        learning_rate: 0.05
        depth: 4
        loss_function: MAE
        pre_fit_model: quadratic

neuralnet_small_paper:
    model: NeuralnetRegressor
    kwargs:
        layers: "44-44-44-44-44"
        n_epochs: 200
        n_batch_size: 25

neuralnet_large_paper:
    model: NeuralnetRegressor
    kwargs:
        layers: "88-88-88-88-88"
        n_epochs: 250
        n_batch_size: 25

neuralnet_small_thesis:
    model: NeuralnetRegressor
    kwargs:
        layers: "22-22-22-22"
        n_epochs: 200
        n_batch_size: 25

neuralnet_large_thesis:
    model: NeuralnetRegressor
    kwargs:
        layers: "50-50-50-50-50"
        n_epochs: 250
        n_batch_size: 25
